service: app-collector-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  noteTableName: ${self:custom.stage}-notes
  # Set the table name here so we can use it while testing locally
  locationTableName: ${self:custom.stage}-locations
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  environment:
    noteTableName: ${self:custom.noteTableName}
    locationTableName: ${self:custom.locationTableName}

  iamRoleStatements:
    # Allow access to the Locations table created within this doc
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ LocationsTable, Arn ]
    # Allow access to the countries table. Only read access
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:us-east-1:326696086447:table/country-table"

functions:
  # # Defines an HTTP API endpoint that calls the main function in create.js
  # # - path: url path is /notes
  # # - method: POST request
  # # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  # #     domain api call
  # # - authorizer: authenticate using the AWS IAM role
  # create:
  #   handler: create.main
  #   events:
  #     - http:
  #         path: notes
  #         method: post
  #         cors: true
  #         authorizer: aws_iam


  listCountries:
    handler: listCountries.main
    events:
      - http:
          path: countries
          method: get
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpoint that calls the main function in createLocation.js
  # - path: url path is /locations
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createLocation:
    handler: locations/createLocation.main
    events:
      - http:
          path: locations
          method: post
          cors: true
          authorizer: aws_iam

  listAllLocations:
    # Defines an HTTP API endpoint that calls the main function in listAllLocations.js
    # - path: url path is /locations
    # - method: GET request
    handler: locations/listAllLocations.main
    events:
      - http:
          path: locations
          method: get
          cors: true
          authorizer: aws_iam

  listLocations:
    # Defines an HTTP API endpoint that calls the main function in listLocations.js
    # - path: url path is /locations/{countryId}
    # - method: GET request
    handler: locations/listLocations.main
    events:
      - http:
          path: locations/{countryId}
          method: get
          cors: true
          authorizer: aws_iam

  getLocation:
    # Defines an HTTP API endpoint that calls the main function in getLocation.js
    # - path: url path is /location/{id}
    # - method: GET request
    handler: locations/getLocation.main
    events:
      - http:
          path: locations/{countryId}/{locationId}
          method: get
          cors: true
          authorizer: aws_iam


  # updateLocation:
  #   # Defines an HTTP API endpoint that calls the main function in updateLocation.js
  #   # - path: url path is /locations/{id}
  #   # - method: PUT request
  #   handler: locations/updateLocation.main
  #   events:
  #     - http:
  #         path: locations/{countryId}/{id}
  #         method: put
  #         cors: true
  #         authorizer: aws_iam

  # deleteLocation:
  #   # Defines an HTTP API endpoint that calls the main function in deleteLocation.js
  #   # - path: url path is /locations/{id}
  #   # - method: DELETE request
  #   handler: locations/deleteLocation.main
  #   events:
  #     - http:
  #         path: locations/{countryId}/{id}
  #         method: delete
  #         cors: true
  #         authorizer: aws_iam
  # get:
  #   # Defines an HTTP API endpoint that calls the main function in get.js
  #   # - path: url path is /notes/{id}
  #   # - method: GET request
  #   handler: get.main
  #   events:
  #     - http:
  #         path: notes/{id}
  #         method: get
  #         cors: true
  #         authorizer: aws_iam

  # list:
  #   # Defines an HTTP API endpoint that calls the main function in list.js
  #   # - path: url path is /notes
  #   # - method: GET request
  #   handler: list.main
  #   events:
  #     - http:
  #         path: notes
  #         method: get
  #         cors: true
  #         authorizer: aws_iam

  # update:
  #   # Defines an HTTP API endpoint that calls the main function in update.js
  #   # - path: url path is /notes/{id}
  #   # - method: PUT request
  #   handler: update.main
  #   events:
  #     - http:
  #         path: notes/{id}
  #         method: put
  #         cors: true
  #         authorizer: aws_iam

  # delete:
  #   # Defines an HTTP API endpoint that calls the main function in delete.js
  #   # - path: url path is /notes/{id}
  #   # - method: DELETE request
  #   handler: delete.main
  #   events:
  #     - http:
  #         path: notes/{id}
  #         method: delete
  #         cors: true
  #         authorizer: aws_iam

resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}